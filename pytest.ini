[tool:pytest]
# Test Discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
collect_ignore = 
    venv/
    .git/
    __pycache__/
    *.pyc
    htmlcov/
    .pytest_cache/

# Output and Reporting
addopts = 
    --strict-markers
    --strict-config
    --tb=short
    --maxfail=10
    --durations=10
    --durations-min=0.1
    --timeout=300
    --timeout-method=thread
    --cov=larrybot
    --cov-report=term-missing
    --cov-report=html
    --cov-report=xml
    --cov-fail-under=85
    --cov-branch
    --no-cov-on-fail
    --verbose
    --disable-warnings
    --color=yes

# Comprehensive Test Markers
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (database, external services)
    slow: Slow running tests (>1 second)
    performance: Performance benchmarks and timing tests
    property: Property-based tests
    chaos: Chaos engineering tests
    smoke: Smoke tests for critical functionality
    regression: Regression tests
    flaky: Tests that may occasionally fail
    factory: Tests using factory system
    database: Tests requiring database
    api: Tests involving external APIs
    async: Async tests
    mock: Tests using mocks

# Async Configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Warning Filters
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:telegram.*
    ignore::RuntimeWarning:unittest.mock.*
    default::FutureWarning

# Coverage Configuration
[coverage:run]
source = larrybot
omit = 
    */tests/*
    */venv/*
    setup.py
    */__pycache__/*
    */migrations/*
    alembic/*
    docs/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
    # type: ignore
    # noqa
    # fmt: off
    # fmt: on
fail_under = 85
show_missing = True
precision = 2 